#!/usr/bin/env bash
#
# Git Setup V2 - Direct 1Password Integration
# Maintains mappings between profile names and 1Password items
#
# Usage:
#   git setup <target>           # Configure repo with saved profile
#   git setup -add               # Interactive add new profile
#   git setup -list              # List configured profiles
#   git setup -edit <target>     # Edit existing profile
#   git setup -delete <target>   # Remove profile

set -euo pipefail

# Configuration
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/git-setup"
CONFIG_FILE="$CONFIG_DIR/profiles.json"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# Initialize config file if it doesn't exist
if [[ ! -f "$CONFIG_FILE" ]]; then
    echo '{}' > "$CONFIG_FILE"
fi

# Helper functions
print_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

# Check if 1Password CLI is available
check_op() {
    if ! command -v op &> /dev/null; then
        print_color "$RED" "Error: 1Password CLI (op) is not installed"
        print_color "$YELLOW" "Install it from: https://developer.1password.com/docs/cli/get-started/"
        exit 1
    fi
}

# Get all SSH keys from 1Password
get_1password_ssh_keys() {
    check_op

    # Get all SSH keys from 1Password
    op item list --categories "SSH Key" --format=json 2>/dev/null | \
        jq -r '.[] | select(.category == "SSH_KEY") | "\(.id)|\(.title)|\(.vault.name)"' | \
        sort -t'|' -k2
}

# Get profile configuration from 1Password
get_1password_profile_data() {
    local item_id=$1

    # Get the full item details
    local item_json=$(op item get "$item_id" --format=json 2>/dev/null)

    if [[ -z "$item_json" ]]; then
        return 1
    fi

    # Extract public key
    local public_key=$(echo "$item_json" | jq -r '.fields[] | select(.label == "public key") | .value // empty')

    # Try to extract username and email from fields
    local username=$(echo "$item_json" | jq -r '.fields[] | select(.label == "username" or .label == "name") | .value // empty' | head -1)
    local email=$(echo "$item_json" | jq -r '.fields[] | select(.label == "email") | .value // empty' | head -1)

    # If no email in fields, try to extract from item overview
    if [[ -z "$email" ]]; then
        email=$(echo "$item_json" | jq -r '.overview.subtitle // empty')
    fi

    echo "$username|$email|$public_key"
}

# Save profile mapping
save_profile() {
    local target=$1
    local item_id=$2
    local vault=$3
    local title=$4

    # Update the JSON config
    local temp_file=$(mktemp)
    jq --arg target "$target" \
       --arg item_id "$item_id" \
       --arg vault "$vault" \
       --arg title "$title" \
       '.[$target] = {item_id: $item_id, vault: $vault, title: $title, updated: now | strftime("%Y-%m-%d %H:%M:%S")}' \
       "$CONFIG_FILE" > "$temp_file"

    mv "$temp_file" "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"
}

# Get profile from config
get_profile() {
    local target=$1
    jq -r --arg target "$target" '.[$target] // empty' "$CONFIG_FILE"
}

# Interactive profile selection
select_ssh_key() {
    local ssh_keys
    ssh_keys=$(get_1password_ssh_keys)

    if [[ -z "$ssh_keys" ]]; then
        print_color "$RED" "No SSH keys found in 1Password"
        return 1
    fi

    print_color "$BLUE" "Available SSH keys in 1Password:"
    echo

    # Display keys with numbers
    local i=1
    local keys_array=()
    while IFS='|' read -r id title vault; do
        printf "  %2d) %-30s [%s]\n" "$i" "$title" "$vault"
        keys_array+=("$id|$title|$vault")
        ((i++))
    done <<< "$ssh_keys"

    echo
    read -p "Select SSH key (1-$((i-1))): " selection

    if [[ ! "$selection" =~ ^[0-9]+$ ]] || (( selection < 1 || selection >= i )); then
        print_color "$RED" "Invalid selection"
        return 1
    fi

    echo "${keys_array[$((selection-1))]}"
}

# Add new profile interactively
add_profile_interactive() {
    print_color "$BLUE" "=== Add New Git Profile ==="
    echo

    # Get profile name
    read -p "Profile name (e.g., github, work, home): " target
    if [[ -z "$target" ]]; then
        print_color "$RED" "Profile name cannot be empty"
        return 1
    fi

    # Check if profile already exists
    if [[ -n $(get_profile "$target") ]]; then
        print_color "$YELLOW" "Profile '$target' already exists. Use 'git setup -edit $target' to modify it."
        return 1
    fi

    # Select SSH key from 1Password
    echo
    local selected_key
    selected_key=$(select_ssh_key)

    if [[ -z "$selected_key" ]]; then
        return 1
    fi

    IFS='|' read -r item_id title vault <<< "$selected_key"

    # Save the profile
    save_profile "$target" "$item_id" "$vault" "$title"

    print_color "$GREEN" "✓ Profile '$target' saved successfully"
    print_color "$YELLOW" "  1Password Item: $title"
    print_color "$YELLOW" "  Vault: $vault"
    echo
    print_color "$BLUE" "You can now use: git setup $target"
}

# List all profiles
list_profiles() {
    local profiles=$(jq -r 'to_entries | .[] | "\(.key)|\(.value.title)|\(.value.vault)|\(.value.updated)"' "$CONFIG_FILE" | sort)

    if [[ -z "$profiles" ]]; then
        print_color "$YELLOW" "No profiles configured. Use 'git setup -add' to add one."
        return
    fi

    print_color "$BLUE" "Configured Git Profiles:"
    echo
    printf "%-15s %-30s %-20s %s\n" "PROFILE" "1PASSWORD ITEM" "VAULT" "UPDATED"
    printf "%-15s %-30s %-20s %s\n" "-------" "--------------" "-----" "-------"

    while IFS='|' read -r profile title vault updated; do
        printf "%-15s %-30s %-20s %s\n" "$profile" "$title" "$vault" "$updated"
    done <<< "$profiles"
}

# Configure git repository
configure_git_repo() {
    local target=$1

    # Get profile configuration
    local profile_json=$(get_profile "$target")
    if [[ -z "$profile_json" ]]; then
        print_color "$RED" "Profile '$target' not found"
        echo
        list_profiles
        echo
        print_color "$YELLOW" "Use 'git setup -add' to add a new profile"
        return 1
    fi

    # Extract profile details
    local item_id=$(echo "$profile_json" | jq -r '.item_id')
    local title=$(echo "$profile_json" | jq -r '.title')
    local vault=$(echo "$profile_json" | jq -r '.vault')

    print_color "$BLUE" "Configuring git with profile: $target"
    print_color "$BLUE" "  1Password Item: $title"
    print_color "$BLUE" "  Vault: $vault"

    # Get data from 1Password
    local profile_data
    profile_data=$(get_1password_profile_data "$item_id")

    if [[ -z "$profile_data" ]]; then
        print_color "$RED" "Failed to retrieve data from 1Password"
        return 1
    fi

    IFS='|' read -r username email public_key <<< "$profile_data"

    # Prompt for missing data
    if [[ -z "$username" ]]; then
        read -p "Enter your name for commits: " username
    fi

    if [[ -z "$email" ]]; then
        read -p "Enter your email for commits: " email
    fi

    if [[ -z "$public_key" ]]; then
        print_color "$RED" "No public key found in 1Password item"
        return 1
    fi

    print_color "$BLUE" "  Name: $username"
    print_color "$BLUE" "  Email: $email"

    # Detect SSH signing program
    local ssh_signing_program
    case "$(uname -s)" in
        Linux*|Darwin*)
            ssh_signing_program="/usr/bin/ssh-keygen"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            ssh_signing_program="C:/Windows/System32/OpenSSH/ssh-keygen.exe"
            ;;
        *)
            ssh_signing_program="ssh-keygen"
            ;;
    esac

    # Configure git
    git config --local user.name "$username"
    git config --local user.email "$email"
    git config --local user.signingkey "$public_key"
    git config --local commit.gpgsign true
    git config --local tag.gpgsign true
    git config --local gpg.format ssh
    git config --local gpg.ssh.program "$ssh_signing_program"

    # Update allowed signers
    local allowed_signers="${XDG_CONFIG_HOME:-$HOME/.config}/git/allowed_signers"
    mkdir -p "$(dirname "$allowed_signers")"

    # Remove existing entry for this email if present
    if [[ -f "$allowed_signers" ]]; then
        grep -v "^$email " "$allowed_signers" > "$allowed_signers.tmp" 2>/dev/null || true
        mv "$allowed_signers.tmp" "$allowed_signers"
    fi

    # Add new entry
    echo "$email $public_key" >> "$allowed_signers"
    git config --local gpg.ssh.allowedSignersFile "$allowed_signers"

    print_color "$GREEN" "✓ Git configuration updated successfully"

    # Check for pre-commit
    if [[ -f ".pre-commit-config.yaml" ]] && command -v pre-commit &> /dev/null; then
        print_color "$BLUE" "Installing pre-commit hooks..."
        pre-commit install >/dev/null 2>&1
        pre-commit install --hook-type commit-msg >/dev/null 2>&1
        print_color "$GREEN" "✓ Pre-commit hooks installed"
    fi
}

# Edit existing profile
edit_profile() {
    local target=$1

    # Check if profile exists
    if [[ -z $(get_profile "$target") ]]; then
        print_color "$RED" "Profile '$target' not found"
        return 1
    fi

    print_color "$BLUE" "=== Edit Profile: $target ==="
    echo

    # Select new SSH key
    local selected_key
    selected_key=$(select_ssh_key)

    if [[ -z "$selected_key" ]]; then
        return 1
    fi

    IFS='|' read -r item_id title vault <<< "$selected_key"

    # Update the profile
    save_profile "$target" "$item_id" "$vault" "$title"

    print_color "$GREEN" "✓ Profile '$target' updated successfully"
}

# Delete profile
delete_profile() {
    local target=$1

    # Check if profile exists
    if [[ -z $(get_profile "$target") ]]; then
        print_color "$RED" "Profile '$target' not found"
        return 1
    fi

    # Confirm deletion
    read -p "Delete profile '$target'? (y/N): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        print_color "$YELLOW" "Deletion cancelled"
        return 0
    fi

    # Delete from config
    local temp_file=$(mktemp)
    jq --arg target "$target" 'del(.[$target])' "$CONFIG_FILE" > "$temp_file"
    mv "$temp_file" "$CONFIG_FILE"

    print_color "$GREEN" "✓ Profile '$target' deleted"
}

# Main function
main() {
    case "${1:-}" in
        -add|--add)
            add_profile_interactive
            ;;
        -list|--list|-l)
            list_profiles
            ;;
        -edit|--edit)
            if [[ -z "${2:-}" ]]; then
                print_color "$RED" "Usage: git setup -edit <profile>"
                exit 1
            fi
            edit_profile "$2"
            ;;
        -delete|--delete|-d)
            if [[ -z "${2:-}" ]]; then
                print_color "$RED" "Usage: git setup -delete <profile>"
                exit 1
            fi
            delete_profile "$2"
            ;;
        -help|--help|-h|"")
            cat << EOF
Git Setup V2 - Direct 1Password Integration

Usage:
  git setup <target>         Configure current repo with profile
  git setup -add            Add new profile (interactive)
  git setup -list           List all configured profiles
  git setup -edit <target>  Edit existing profile
  git setup -delete <target> Delete profile
  git setup -help           Show this help

Examples:
  git setup -add            # Interactively add a new profile
  git setup github          # Configure repo with 'github' profile
  git setup -list           # Show all profiles

Profile Storage:
  $CONFIG_FILE

This tool maintains mappings between profile names and 1Password SSH keys,
allowing you to use simple names like 'github', 'work', 'home' without
modifying 1Password's agent.toml file.
EOF
            ;;
        -*)
            print_color "$RED" "Unknown option: $1"
            echo "Use 'git setup -help' for usage information"
            exit 1
            ;;
        *)
            # Regular profile usage
            configure_git_repo "$1"
            ;;
    esac
}

# Check for required tools
for tool in jq op git; do
    if ! command -v "$tool" &> /dev/null; then
        print_color "$RED" "Error: Required tool '$tool' is not installed"
        case "$tool" in
            jq) echo "Install with: brew install jq" ;;
            op) echo "Install from: https://developer.1password.com/docs/cli/get-started/" ;;
        esac
        exit 1
    fi
done

# Run main
main "$@"
