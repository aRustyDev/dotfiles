[user]
        signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMuYacrQTogQthysPK1Y347ReTcb0r69ccJKe2VF+EXe
        useConfigOnly = true
[includeIf "hasconfig:remote.*.url:https://github.com/**"]
        email = developer@gh.arusty.dev
        name = aRustyDev
[includeIf "hasconfig:remote.*.url:https://git.darkhuntlabs.com/**"]
        email = adam.smith@darkhuntlabs.com
        name = asmith
[includeIf "hasconfig:remote.*.url:https://git.arusty.dev/**"]
        email = developer@gh.arusty.dev
        name = aRustyDev
[includeIf "hasconfig:remote.*.url:https://git.va.th.ten/**"]
        email = adam.smith@associates.gwe.cisa.dhs.gov
        name = asmith
; ------ END USER CONFIG ------
[credential]
        helper = osxkeychain
[includeIf "hasconfig:remote.*.url:https://git.va.th.ten/**"]
        ; Cache OAuth signing creds in osxkeychain
        ; useHttpPath = ""
	username = asmith
	helper = cache --timeout 14400	# six hours
	helper = oauth
; ------ END CREDENTIAL CONFIG ------
; [author]
;         name=""
;         email=""
; ------ END AUTHOR CONFIG ------
; [committer]
;         name=""
;         email=""
; ------ END COMMITTER CONFIG ------
[author]
        gpgsign = true
        ; template = /path/to/templates
; ------ END COMMIT CONFIG ------
[tag]
        gpgsign = true
; ------ END COMMIT CONFIG ------
[http]
        sslVerify = true
        ; sslcainfo /bin/curl-ca-bundle.crt
        ; proxyAuthMethod "anyauth|basic|digest|negotiate|ntlm"
        ; sslCAInfo = C:/yourfolder/AppData/Local/Programs/Git/mingw64/ssl/certs/ca-bundle.crt # File containing the certificates to verify the peer with when fetching or pushing over HTTPS
        ; sslCAPath = "" # Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS.
        ; sslCert = "" # File containing the SSL certificate when fetching or pushing over HTTPS
        ; sslKey = "" # File containing the SSL private key when fetching or pushing over HTTPS
        ; sslCertPasswordProtected = "" # Enable Git’s password prompt for the SSL certificate. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted
        ; sslBackend = schannel # Name of the SSL backend to use (e.g. "openssl" or "schannel"). This option is ignored if cURL lacks support for choosing the SSL backend at runtime
        ; sslVerify = true
        ; proxysslCAInfo = C:/yourfolder/AppData/Local/Programs/Git/mingw64/ssl/certs/ca-bundle.crt # Pathname to the file containing the certificate bundle that should be used to verify the proxy with when using an HTTPS proxy
        ; proxysslCAPath = "" #
        ; proxysslCert = "" # pathname to client certificate used to authenticate w/ the HTTPS proxy
        ; proxysslKey = "" # pathname of a file that stores a private key to use to authenticate with an HTTPS proxy
        ; proxysslCertPasswordProtected = "" # Enable Git’s password prompt for the proxy SSL certificate. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted
        ; proxysslBackend = schannel
        ; proxysslVerify = true
        ; proactiveAuth = auto
        ; extraHeader = ""
        ; sslVersion = "tlsv1.3"
        ; sslCipherList = ""
        ; userAgent = ""
        ; followRedirects
        ; pinnedPubkey = "" # Public key of the https service. It may either be the filename of a PEM or DER encoded public key file or a string starting with sha256// followed by the base64 encoded sha256 hash of the public key
        ; schannelUseSSLCAInfo = "" # As of cURL v7.60.0, the Secure Channel backend can use the certificate bundle provided via http.sslCAInfo, but that would override the Windows Certificate Store. Since this is not desirable by default, Git will tell cURL not to use that bundle by default when the schannel backend was configured via http.sslBackend, unless http.schannelUseSSLCAInfo overrides this behavior.
        ; schannelCheckRevoke = "" # Used to enforce or disable certificate revocation checks in cURL when http.sslBackend is set to "schannel". Defaults to true if unset. Only necessary to disable this if Git consistently errors and the message is about checking the revocation status of a certificate. This option is ignored if cURL lacks support for setting the relevant SSL option at runtime.


[http "https://git.va.th.ten.com"]
        sslVerify = false
	proxy = "username%40company.com:password@proxyserverIP:port" # if git server is behind a proxy server
[https]
        sslVerify = true

[https "https://git.va.th.ten.com"]
        sslVerify = false
; ------ END HTTP/S CONFIG ------
; [socks]
;         proxy=
; ------ END SOCKS CONFIG ------
[gpg]
        program = gpg
        format = ssh
        ; minTrustLevel=""
[includeIf "hasconfig:remote.*.url:https://git.va.th.ten/**"]
        ; If for TEN use GitSign via x509
	format = x509 # gitsign expects x509 args

[gpg "ssh"]
        program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"
        allowedSignersFile = /Users/analyst/.config/git/allowed_ssh_signers
        ; revocationFile = "" # Either a SSH KRL or a list of revoked public keys (without the principal prefix). See ssh-keygen(1) for details. If a public key is found in this file then it will always be treated as having trust level "never" and signatures will show as invalid
        ; defaultKeyCommand = ""

[gpg "x509"]
        program = gitsign # Use gitsign for signing
; ------ END GPG CONFIG ------
[filter "lfs"]
        process = git-lfs filter-process
        required = true
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
; ------ END FILTER CONFIG ------
[init]
        defaultBranch = main
; ------ END INIT CONFIG ------
[color]
        ui=auto
        ; status=
; [color "transport"]
        ; rejected=
; ------ END COLOR CONFIG ------
[core]
        repositoryformatversion=0
        filemode=true
        bare=false
        logallrefupdates=true
        ignorecase=true
        precomposeunicode=true
        fsyncMethod=""
        fsync=""
        whitespace=""
        pager=""
        editor=vim
        hooksPath=""
        askPass=""
        sshCommand=""
[includeIf "hasconfig:remote.*.url:https://kernel.org/**"]
        ; If for TEN use GitSign via x509
	gitproxy=proxy-command for kernel.org
[includeIf "hasconfig:remote.*.url:https://git.va.th.ten/**"]
        ; If for TEN use GitSign via x509
	gitproxy=default-proxy ; for all the rest
; ------ END CORE CONFIG ------
[web]
        browser=librewolf
; ------ END WEB CONFIG ------
; [browser "tool"]
;         cmd=""
;         path=""
; ------ END BROWSER CONFIG ------
; [BUNDLE ""]
; ------ END BUNDLE CONFIG ------
[branch "x"]
        remote=origin
        merge=refs/heads/main
        vscode-merge-base=origin/main
; ------ END BRANCH CONFIG ------
; [gitsign]
        ; fulcio=https://fulcio.example.com
        ; logPath=""
        ; clientID=sigstore
        ; issuer=https://oauth2.sigstore.dev/auth
        ; matchCommitter=false
        ; redirectURL=""
        ; rekor=https://rekor.sigstore.dev
        ; connectorID=https://git.va.th.ten/ (OAuth flow URL)
        ; tokenProvider=interactive
        ; timestampServerURL=""
        ; timestampCertChain=""
        ; autoclose=true
        ; autocloseTimeout=6
; ------ END GITSIGN CONFIG ------
; [protocol]
;         allow=""
;         version=""
; [protocol "name"]
;         allow=""
; ------ END PROTOCOL CONFIG ------
